@using MIDIvJoy.Models.DataModels
@using MIDIvJoy.Models.Joysticks
@using MIDIvJoy.ViewModels

@inject MidiConfigViewModel ViewModel
@inject IJoysticks m

<style>
    .config-container {
        display: grid;
        overflow: auto;
        align-content: start;
    }

    .config-text-center {
        text-align: center;
    }

    .config-text-bold {
        font-weight: 500;
    }

    .config-vcenter-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: calc(100vh - 300px);
    }
</style>

<Layout Class="app-layout">
    <Menu Class="app-menu" Mode="MenuMode.Inline"
          SelectedKeys="@(new[] { ViewModel.DeviceId })">

        @if (ViewModel.DevicesAvailable.Length == 0)
        {
            <MenuItem Class="app-menu-item" Disabled>
                No Device
            </MenuItem>
        }
        @foreach (var device in ViewModel.DevicesAvailable)
        {
            <MenuItem Class="app-menu-item" Key=@device.Id
                      OnClick="@(_ => ViewModel.SwitchId(device.Id))">
                @device.Name
            </MenuItem>
        }

    </Menu>

    <Layout Class="app-content">
        <Content Class="app-content-item config-container" Style="display: flex; flex-direction: column;">
            <Breadcrumb Style="margin: 0 0 12px;">
                <BreadcrumbItem>MIDI Device</BreadcrumbItem>
                <BreadcrumbItem>@GetCurrentDeviceName()</BreadcrumbItem>
            </Breadcrumb>

            @if (ViewModel.DevicesAvailable.Length > 0)
            {
                <Divider Orientation="left">Axes (@ViewModel.CommandsAxis.Length)</Divider>
                <GridRow Gutter="(8, 8)">

                    @foreach (var command in ViewModel.CommandsAxis)
                    {
                        var isTriggered = command.Id == ViewModel.CommandReceived?.Id;
                        <GridCol Span="6" Md="4" Lg="3" Class="watcher-text-center">
                            <Button Style="width: 100%;" Size="small"
                                    Type=@(isTriggered ? "primary" : "default")
                                    OnClick=@(_ => ViewModel.EditBinding(command))>
                                @command.Name
                            </Button>
                        </GridCol>
                    }

                </GridRow>

                <Divider Orientation="left">Buttons (@ViewModel.CommandsButton.Length)</Divider>
                <GridRow Gutter="(8, 8)">

                    @foreach (var command in ViewModel.CommandsButton)
                    {
                        var isTriggered = command.Id == ViewModel.CommandReceived?.Id;
                        <GridCol Span="6" Md="4" Lg="3" Class="watcher-text-center">
                            <Button Style="width: 100%;" Size="small"
                                    Type=@(isTriggered ? "primary" : "default")
                                    OnClick=@(_ => ViewModel.EditBinding(command))>
                                @command.Name
                            </Button>
                        </GridCol>
                    }

                </GridRow>

                <Divider Orientation="left">Unassigned (@ViewModel.CommandsUnbinded.Length)</Divider>
                <GridRow Gutter="(8, 8)">

                    @foreach (var command in ViewModel.CommandsUnbinded)
                    {
                        var isTriggered = command.Key.Equals(ViewModel.CommandReceived?.Key);
                        if (ViewModel.CommandReceived?.Action.Type != ActionType.None) isTriggered = false;
                        <GridCol Span="6" Md="4" Lg="3" Class="watcher-text-center">
                            <Button Style="width: 100%;" Size="small"
                                    Type=@(isTriggered ? "primary" : "default")
                                    OnClick=@(_ => ViewModel.EditBinding(command))>
                                @command.Name
                            </Button>
                        </GridCol>
                    }

                </GridRow>

                <div style="margin-top: auto; padding-top: 10px;">
                    Click on a MIDI event to bind it to a Joystick action.
                    <br/>
                    All events not binded are listed under the "Unassigned" section.
                    The values are updated to the last received ones.
                </div>
            }
            else
            {
                <div class="config-vcenter-container">
                    <Result Status="warning" Title="No MIDI Controller Available."/>
                </div>
            }

            <Modal Title="@ViewModel.CommandSelected?.Name"
                   Visible="@ViewModel.IsSettingsVisible"
                   Draggable="true" DragInViewport="false"
                   OnOk="@ViewModel.EditBindingSave"
                   OnCancel="@ViewModel.EditBindingCancel"
                   ConfirmLoading="@ViewModel.IsSettingsLoading">

                @if (ViewModel.CommandEditing != null)
                {
                    <Form Model="@ViewModel.CommandEditing"
                          LabelColSpan="6"
                          WrapperColSpan="18"
                          Size="small"
                          Loading="@ViewModel.IsSettingsLoading">

                        <FormItem Style="margin: 4px;" Label="Name">
                            <Input @bind-Value="@context.Name"/>
                        </FormItem>
                        <FormItem Style="margin: 4px;" Label="Command ID">
                            <Input Disabled Value="@context.Id"/>
                        </FormItem>

                        <FormItem Style="margin: 4px;" Label="MIDI Device">
                            <Input Disabled Value="@context.Event.Device"/>
                        </FormItem>
                        <FormItem Style="margin: 4px;" Label="MIDI Event">
                            <Input Disabled Value="@context.Event.Command"/>
                        </FormItem>

                        <FormItem Style="margin: 4px;" Label="Trigger Values">
                            <InputGroup Compact>
                                @if (context.Action.Type == ActionType.Button)
                                {
                                    <Input Type="number" @bind-Value="@context.Event.Value"/>
                                    <Input Style="width: 30px; pointer-events: none;" Value="@("~")" Disabled/>
                                    <Input Type="number" @bind-Value="@context.Event.ValueRangeHigh" Disabled/>
                                }
                                else
                                {
                                    <Input Type="number" @bind-Value="@context.Event.Value"
                                           min="@context.Event.ValueMin" max="@context.Event.ValueRangeHigh"
                                           Disabled="@(context.Action.Type == ActionType.None)"/>
                                    <Input Style="width: 30px; pointer-events: none;" Value="@("~")" Disabled/>
                                    <Input Type="number" @bind-Value="@context.Event.ValueRangeHigh"
                                           max="@context.Event.ValueMax" min="@context.Event.Value"
                                           Disabled="@(context.Action.Type == ActionType.None)"/>
                                }
                            </InputGroup>
                        </FormItem>
                        
                        <FormItem Style="margin: 4px;" Label="Action Type">
                            <RadioGroup @bind-Value="@context.Action.Type" Style="display: flex;">
                                @foreach (var type in Enum.GetValues<ActionType>())
                                {
                                    <Radio RadioButton Value="@type"
                                           Style="flex-grow: 1; text-align: center;">
                                        @type
                                    </Radio>
                                }
                            </RadioGroup>
                        </FormItem>

                        <FormItem Style="margin: 4px;" Label="Joystick Device">
                            <RadioGroup @bind-Value="@context.Action.DeviceId" Style="display: flex;">
                                <AntDesign.InputNumber @bind-Value="@context.Action.DeviceId"
                                                       Min="1" Max="16"
                                                       Style="width: 60px; margin-right: 8px"/>

                                @foreach (var id in Enumerable.Range(1, 5))
                                {
                                    <Radio RadioButton Value="@id"
                                           Style="flex-grow: 1; text-align: center;">
                                        @id
                                    </Radio>
                                }
                            </RadioGroup>
                        </FormItem>

                        <FormItem Style="margin: 4px;" Label="Axis and Range">
                            <InputGroup Compact>
                                <Select DataSource="@(Enum.GetValues<JoystickAxis>())"
                                        @bind-Value="@context.Action.Axis.Axis"
                                        Style="width: 450px; margin-right: 8px"
                                        Disabled="@(context.Action.Type != ActionType.Axis)"
                                        EnableSearch>
                                </Select>

                                <Input Type="number" @bind-Value="@context.Event.ValueMin"
                                       max="@int.Min(context.Event.ValueMax, context.Event.Value)"
                                       Disabled="@(context.Action.Type == ActionType.None)"/>
                                <Input Style="width: 30px; pointer-events: none;" Value="@("~")" Disabled/>
                                <Input Type="number" @bind-Value="@context.Event.ValueMax"
                                       min="@int.Min(context.Event.ValueMin, context.Event.ValueRangeHigh)"
                                       Disabled="@(context.Action.Type == ActionType.None)"/>
                            </InputGroup>
                        </FormItem>

                        <FormItem Style="margin: 4px;" Label="Button Number">
                            <RadioGroup @bind-Value="@context.Action.Button.Type" Style="display: flex;">
                                <AntDesign.InputNumber @bind-Value="@context.Action.Button.Number" Min="1"
                                                       Style="width: 60px; margin-right: 8px"
                                                       Disabled="@(context.Action.Type != ActionType.Button)"/>

                                @foreach (var type in Enum.GetValues<ActionTypeButton>())
                                {
                                    <Radio RadioButton Value="@type"
                                           Style="flex-grow: 1; text-align: center;"
                                           Disabled="@(context.Action.Type != ActionType.Button)">
                                        @type
                                    </Radio>
                                }
                            </RadioGroup>
                        </FormItem>

                    </Form>
                }
            </Modal>
        </Content>
    </Layout>
</Layout>

@code {

    protected override void OnInitialized()
    {
        ViewModel.OnInitialized();
        ViewModel.StateHasChanged += () => InvokeAsync(StateHasChanged);
    }

    private string GetCurrentDeviceName()
    {
        var device = ViewModel.DevicesAvailable
            .FirstOrDefault(d => d.Id == ViewModel.DeviceId);
        return device.Name ?? "Unknown";
    }

}