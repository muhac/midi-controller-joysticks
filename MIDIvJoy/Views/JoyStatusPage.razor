@using MIDIvJoy.Services.Joysticks
@using JoyFeeder = MIDIvJoy.Services.Joysticks.JoyFeeder

<style>
    .status-note {
        text-align: center;
        line-height: 24px;
        height: 24px;
        margin-bottom: 2px;
        margin-top: -26px;
        background-color: lightgoldenrodyellow;
        color: #233333;
        display: none;
    }

    .status-note > small {
        color: dimgray;
        margin-left: 1%;
    }

    .status-warning {
        background-color: lightcoral;
        color: floralwhite;
        display: block;
    }

    footer:hover .status-note {
        display: block;
    }

    .status-container {
        display: grid;
        grid-template-columns: repeat(@_blocks, 1fr);
        width: 100vw;
        gap: 2px;
    }

    .status-block {
        height: 48px;
        padding-top: 6px;
        text-align: center;
    }

    .status-block > div {
        margin-top: -4px;
        font-size: 12px;
    }

    .status-num {
        display: none;
    }

    .status-block:hover .status-num {
        display: block;
    }

    .status-block:hover .status-info {
        display: none;
    }

    .status-Free {
        background-color: lightgreen;
        cursor: grab;
    }

    .status-Engaged {
        background-color: lightskyblue;
        cursor: grabbing;
    }

    .status-Occupied {
        background-color: lightsalmon;
        cursor: wait;
    }

    .status-Unknown {
        background-color: lightgray;
        cursor: not-allowed;
    }
</style>

@{
    var status = new JoyStatus[16];

    for (uint id = 1; id <= 16; id++)
    {
        var joystick = JoyManager.GetInstance().GetJoystick(id);
        status[id - 1] = joystick?.Status ?? JoyStatus.Unknown;
    }

    var unknownCount = status.Count(s => s == JoyStatus.Unknown);
    if (unknownCount == 16)
    {
        <div class="status-note status-warning">WARNING: vJoy is not enabled!</div>
    }
    else if (_m.VersionDll != _m.VersionDrv)
    {
        <div class="status-note status-warning">
            WARNING: DLL version @($"{_m.VersionDll:X}") does not match driver version @($"{_m.VersionDrv:X}")!
        </div>
    }
    else
    {
        <div class="status-note">
            <span>Click on a vJoy to acquire or release it.</span>
            <small>Driver version: @($"{_m.VersionDrv:X}")</small>
        </div>
    }

    // display 8 blocks instead of 16 if there are more than 8 unknown joysticks.
    unknownCount = status[8..].Count(s => s == JoyStatus.Unknown);
    Console.WriteLine(unknownCount);
    var blocks = unknownCount == 8 ? 8 : 16;
    if (blocks != _blocks)
    {
        _blocks = blocks;
        StateHasChanged();
    }

    <div class="status-container">
        @for (uint i = 0; i < blocks; i++)
        {
            var id = i + 1;
            var icon = status[i] switch
            {
                JoyStatus.Free => "plus-square",
                JoyStatus.Engaged => "check-square",
                JoyStatus.Occupied => "minus-square",
                _ => "close-square",
            };

            <div class="status-block status-@status[i]" onclick="@ToggleActive(id)">
                <Icon Type=@icon Theme="outline" Style="font-size: 24px;"/>
                <div class="status-info">@(status[i] != JoyStatus.Unknown ? status[i] : id)</div>
                <div class="status-num">@id</div>
            </div>
        }
    </div>}

@code {
    private readonly JoyManager _m = JoyManager.GetInstance();
    private int _blocks;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        for (uint id = 1; id <= 16; id++)
        {
            _m.SubscribeToJoystickStatusChanges(id, OnJoystickStatusChanged);
        }
    }

    private void OnJoystickStatusChanged(JoyFeeder sender, JoyStatus status)
    {
        InvokeAsync(StateHasChanged);
    }

    private Action ToggleActive(uint id)
    {
        var vj = _m.GetJoystick(id);
        if (vj == null) return () => { };

        return () =>
        {
            // ReSharper disable once SwitchStatementMissingSomeEnumCasesNoDefault
            switch (vj.Status)
            {
                case JoyStatus.Free:
                    vj.Acquire();
                    break;
                case JoyStatus.Engaged:
                    vj.Release();
                    break;
            }
        };
    }

}