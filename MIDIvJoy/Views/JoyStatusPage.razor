@using MIDIvJoy.Models.DataModels
@using MIDIvJoy.ViewModels

@inject JoyStatusViewModel ViewModel

<style>
    .status-container {
        grid-template-columns: repeat(@ViewModel.Status.Length, 1fr);
    }
</style>

@switch (ViewModel.Bar)
{
    case BarType.Info:
        <div class="status-note">
            <span>Click on a vJoy to acquire or release it.</span>
            <small>Driver version: @($"{ViewModel.VersionDrv:X}")</small>
        </div>
        break;
    case BarType.Warning:
        Console.WriteLine("Warning");
        <div class="status-note status-warning">
            WARNING: DLL version @($"{ViewModel.VersionDll:X}") does not
            match driver version @($"{ViewModel.VersionDrv:X}")!
        </div>
        break;
    case BarType.Error:
        Console.WriteLine("Error");
        <div class="status-note status-warning">WARNING: vJoy is not enabled!</div>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

<div class="status-container">
    @foreach (var (status, index) in ViewModel.Status.Select((v, i) => (v, i)))
    {
        var id = index + 1;
        var icon = status switch
        {
            JoystickStatus.Free => "plus-square",
            JoystickStatus.Engaged => "check-square",
            JoystickStatus.Occupied => "minus-square",
            _ => "close-square",
        };

        <div class="status-block status-@status" @onclick="() => ViewModel.ToggleActive(id)">
            <Icon Type=@icon Theme="outline" Style="font-size: 24px;"/>
            <div class="status-info">@(status != JoystickStatus.Unknown ? status : id)</div>
            <div class="status-num">@id</div>
        </div>
    }
</div>

@code {

    protected override void OnInitialized()
    {
        ViewModel.OnInitialized();
        ViewModel.StateHasChanged += () => InvokeAsync(StateHasChanged);
    }

}