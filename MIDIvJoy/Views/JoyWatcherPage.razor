@using MIDIvJoy.ViewModels

@inject JoyWatcherViewModel ViewModel

<style>
    .watcher-container {
        display: grid;
        overflow: auto;
        align-content: start;
    }

    .watcher-text-center {
        text-align: center;
    }

    .watcher-text-bold {
        font-weight: 500;
    }

    .watcher-vcenter-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: calc(100vh - 300px);
    }
</style>

<Layout Class="app-layout">
    <Menu Class="app-menu" Mode="MenuMode.Inline"
          SelectedKeys="@(new[] { ViewModel.DeviceId.ToString() })">

        @if (ViewModel.DevicesAvailable.Length == 0)
        {
            <MenuItem Class="app-menu-item" Disabled>
                No Device
            </MenuItem>
        }
        @foreach (var device in ViewModel.DevicesAvailable)
        {
            <MenuItem Class="app-menu-item" Key=@device.Id.ToString()
                      OnClick="@(_ => ViewModel.SwitchId(device.Id))">
                Joystick @device.Id (@device.Status)
            </MenuItem>
        }

    </Menu>

    <Layout Class="app-content">
        <Content Class="app-content-item watcher-container">
            <Breadcrumb Style="margin: 0 0 12px;">
                <BreadcrumbItem>Virtual Joystick</BreadcrumbItem>
                <BreadcrumbItem>Device @ViewModel.DeviceId</BreadcrumbItem>
            </Breadcrumb>

            @if (ViewModel.IsDisplayData)
            {
                <Divider Orientation="left">Axes (@ViewModel.DisplayState.Axes.Count(x => x.Enabled))</Divider>
                <GridRow Gutter="(8, 6)" OnBreakpoint="() => StateHasChanged()">

                    @foreach (var axis in ViewModel.DisplayState.Axes)
                    {
                        <GridCol Span="5" Md="3" Xxl="1" Class="watcher-text-center watcher-text-bold"
                                 Lg=" new EmbeddedProperty { Span = 2, Order = axis.Index2Col }">
                            @axis.Name
                        </GridCol>
                        <GridCol Span="14" Md="18" Xxl="10" Class="watcher-text-center"
                                 Lg="new EmbeddedProperty { Span = 8, Order = axis.Index2Col }">
                            <Progress Percent="@(axis.Enabled ? axis.Percent : 0)" Status="@ProgressStatus.Active" ShowInfo="false"></Progress>
                        </GridCol>
                        <GridCol Span="5" Md="3" Xxl="1" Class="watcher-text-center"
                                 Lg="new EmbeddedProperty { Span = 2, Order = axis.Index2Col }">
                            @(axis.Enabled ? axis.Value : "N/A")
                        </GridCol>
                    }

                </GridRow>

                <Divider Orientation="left">Buttons (@ViewModel.DisplayState.ButtonNumber)</Divider>
                <GridRow Gutter="(8, 6)">

                    @foreach (var (state, index) in ViewModel.DisplayState.ButtonStates.Select((x, i) => (x, i)))
                    {
                        <GridCol Span="3" Md="2" Lg="1" Class="watcher-text-center">
                            <Tag Style="width: 100%; padding: 0; text-align: center;"
                                 Color="@(state ? "blue-inverse" : "default")">
                                @(index + 1)
                            </Tag>
                        </GridCol>
                    }

                </GridRow>
            }
            else
            {
                <div class="watcher-vcenter-container">
                    <Result Status="warning" Title="This vJoy device is not engaged."/>
                </div>
            }
        </Content>
    </Layout>
</Layout>

@code {

    protected override void OnInitialized()
    {
        ViewModel.OnInitialized();
        ViewModel.StateHasChanged += () => InvokeAsync(StateHasChanged);
    }

}